// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import multipart "mime/multipart"
import repository "gocleancode/repository"

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

// DeleteFileById provides a mock function with given fields: fileId
func (_m *FileService) DeleteFileById(fileId int64) error {
	ret := _m.Called(fileId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileById provides a mock function with given fields: id
func (_m *FileService) GetFileById(id int64) (repository.File, error) {
	ret := _m.Called(id)

	var r0 repository.File
	if rf, ok := ret.Get(0).(func(int64) repository.File); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFile provides a mock function with given fields: file, handle
func (_m *FileService) SaveFile(file multipart.File, handle *multipart.FileHeader) (int64, error) {
	ret := _m.Called(file, handle)

	var r0 int64
	if rf, ok := ret.Get(0).(func(multipart.File, *multipart.FileHeader) int64); ok {
		r0 = rf(file, handle)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(multipart.File, *multipart.FileHeader) error); ok {
		r1 = rf(file, handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import "github.com/stretchr/testify/mock"
import "gocleancode/repository"
import "database/sql"

// FileRepo is an autogenerated mock type for the FileRepo type
type FileRepo struct {
	mock.Mock
}

// GetFileById provides a mock function with given fields: id
func (_m *FileRepo) GetFileById(id int64) (repository.File, error) {
	ret := _m.Called(id)

	var r0 repository.File
	if rf, ok := ret.Get(0).(func(int64) repository.File); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFile provides a mock function with given fields: file
func (_m *FileRepo) SaveFile(file repository.File) (int64, error) {
	ret := _m.Called(file)

	var r0 int64
	if rf, ok := ret.Get(0).(func(repository.File) int64); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repository.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxDeleteFileById provides a mock function with given fields: id, tx
func (_m *FileRepo) TxDeleteFileById(id int64, tx *sql.Tx) error {
	ret := _m.Called(id, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *sql.Tx) error); ok {
		r0 = rf(id, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
